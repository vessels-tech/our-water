apply plugin: "com.android.application"
apply plugin: 'io.fabric'
apply plugin: "com.google.firebase.firebase-perf"

import com.android.build.OutputFile

project.ext.react = [
    root: "../../",
    bundleAssetName: "index.android.bundle",
    entryFile: "src/index.android.js",
    bundleInDebug: false,
    bundleInRelease: true,
    extraPackagerArgs: [ "--sourcemap-output", file("$buildDir/../../../sourcemap.android.js")]
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false
def appVersionCode = Integer.valueOf(System.env.versionCode ?: 1)

android {
    compileSdkVersion 28

    //TODO: remove this - just trying to get firebase to work
    lintOptions {
          abortOnError true
      }

    defaultConfig {
        /* look in env/env.<project>.<stage>.sh */
        applicationId System.getenv('PACKAGE_NAME_PREFIX')
        applicationIdSuffix System.getenv('PACKAGE_NAME_SUFFIX')

        /* look in env/env.deployment */
        versionName System.getenv('versionName')
        versionCode appVersionCode
        minSdkVersion 19
        targetSdkVersion 28 // This needs to be 26... but breaks a whole bunch of other stuff
     
        ndk {
            // abiFilters "armeabi-v7a", "x86"
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
        // use this when code gets too big
        // ref: https://github.com/wix/react-native-navigation/issues/1925
        multiDexEnabled true

        //Required to get react-native-config to work with different package names
        //Ref: https://github.com/luggit/react-native-config#advanced-android-setup
        resValue "string", "build_config_package", "com.vesselstech"

        missingDimensionStrategy 'react-native-camera', 'general'
        missingDimensionStrategy "RNN.reactNativeVersion", "reactNative57_5"

    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) { 
                output.versionCodeOverride =
                    versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }
        release {
            debuggable false
            minifyEnabled false
        }
    }

     compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
   }
}

subprojects { subproject ->
    afterEvaluate {
        if ((subproject.plugins.hasPlugin('android') || subproject.plugins.hasPlugin('android-library'))) {
            android {
                // Try forcing the buildtools version
                compileSdkVersion = 28 
                buildToolsVersion = "28.0.3"
                variantFilter { variant ->
                    def names = variant.flavors*.name
                    if (names.contains("reactNative51") || names.contains("reactNative55")) {
                        setIgnore(true)
                    }
                }
            }
        }
    }
}

dependencies {
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-maps')
    implementation project(':react-native-firebase')
    implementation project(':react-native-svg')
    implementation project(':rn-async-storage')
    implementation project(':react-native-keychain')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-config')

    implementation(project(':react-native-firebase')) {
        transitive = false
    }

    implementation fileTree(dir: "libs", include: ["*.jar"])

    //not sure which we want?
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation "androidx.annotation:annotation:1.1.0"

    implementation "com.facebook.react:react-native:+"  // From node_modules
    
    //react-native-maps
    implementation(project(':react-native-maps')){
        exclude group: 'com.google.android.gms', module: 'play-services-base'
        exclude group: 'com.google.android.gms', module: 'play-services-maps'
    }

    implementation 'com.google.android.gms:play-services-maps:15.0.1'
    implementation "com.google.android.gms:play-services-base:15.0.2"

    //react-native-firebase
    implementation "com.google.firebase:firebase-core:15.0.2"
    implementation "com.google.firebase:firebase-config:15.0.0"
    implementation "com.google.firebase:firebase-firestore:16.0.0"
    implementation "com.google.firebase:firebase-auth:15.1.0"
    implementation "com.google.firebase:firebase-perf:16.0.0" 

    //crashlytics
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') {
      transitive = true
    }

    //react-native-navigation
    implementation project(':react-native-navigation')
    implementation project(':react-native-camera')
    implementation project(':react-native-exception-handler')
}

configurations {
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}
// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

//react-native-config
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

//react-native-firebase
apply plugin: 'com.google.gms.google-services'
